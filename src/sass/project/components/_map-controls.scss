$sz-controls: 150px;
$sz-control: 8px;
$sz-compass: 110px;
$bw-controls: 1px;
$triangle-transparent: $sz-control solid transparent;
$triangle: $sz-control solid white;
$triangle-hover: $sz-control solid $c-marker;
$bc-controls: rgba(255, 255, 255, 0.2);

.map {
	&__controls {
		@include position(absolute, null 0 0 null);
		@include size(135px 140px);
		box-sizing: border-box;
		pointer-events: none;
		user-select: none;

		&.active {
			pointer-events: auto;
			.map__controls-wrapper {
				transform: scale(1);
				opacity: 1;
				visibility: visible;
			}
		}

		&-wrapper {
			transform: scale(0);
			opacity: 0;
			visibility: hidden;
			@include will-change(transform, opacity, visibility);
			@extend %anim-base;
			@include size(135px 140px);
			transform-origin: bottom right;
		}

		&-trigger {
			pointer-events: initial;
			@include size($sz-control * 2);
			background-color: white;
			@include position(absolute, null ($sz-control - 1px) $sz-control null);
			z-index: 2;
			border: 1px solid white;
			@include will-change(border);
			@extend %anim-base;
			cursor: pointer;
			span {
				display: inline-block;
				color: black;
				line-height: 1;
				font-size: $sz-control*2;
				@include size($sz-control*2);
				transform: rotate(225deg);
				position: relative;
				top: -3px;
				left: -2px;
				@include will-change(color);
				@extend %anim-base;
			}
			&:hover {
				//border: 1px solid $c-marker;
				span {
					color: $c-marker;
				}
			}
		}
	}

	&__compass {
		position: relative;
		@include size($sz-compass);
		border-radius: 50%;
		background-color: $bc-controls;
	}

	&__zoom {
		@include size($sz-controls/2);
		@include position(absolute, 50% null null 50%);
		@include margin((-($sz-controls/4)) null null (-($sz-controls/4)));
		border: 1px solid white;
		border-radius: $sz-controls/4;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		align-items: center;
		overflow: hidden;

		&-btn {
			//background-color: $c-marker;
			color: white;
			text-align: center;
			width: 100%;
			cursor: pointer;
			&:first-of-type {

			}

			&:last-of-type {

			}
			span {
				display: inline-block;
				@include will-change(color, transform, background-color, border);
				@extend %anim-base;
				background-color: transparent;
				line-height: $sz-control * 2;
				@include size($sz-control * 2);
				font-size: $sz-control*2;
				border-radius: 50%;
				border: 1px solid transparent;
				box-sizing: content-box;
			}
			&:hover {
				span {
					//transform: rotate3d(1, 0, 0, 180deg);
					color: $c-marker;
					background-color: white;
					border: 1px solid $c-marker
				}
			}
		}
	}

	&__pan {
		@include size($sz-compass);
		overflow: hidden;
		border-radius: $sz-controls/2;
		box-sizing: border-box;
		&-btn {
			@include size($sz-control * 2);
			//background-color: $c-marker;
			border-radius: $sz-control;
			cursor: pointer;

			&:after {
				transform: scale(0.8);
				content: '';
				display: block;
				@include will-change(border, transform);
				@extend %anim-base;
			}

			&:hover {
				&:after {
					transform: scale(1);
				}
			}

			&:nth-of-type(1) {
				@include position(absolute, ($bw-controls *2) null null 50%);
				@include margin(null null null (-($sz-control)));
				&:after {
					border-left: $triangle-transparent;
					border-right: $triangle-transparent;
					border-bottom: $triangle;
					@include position(absolute, $bw-controls * 2 null null null);
				}
				&:hover {
					&:after {
						border-bottom: $triangle-hover;
					}
				}
			}

			&:nth-of-type(2) {
				@include position(absolute, 50% ($bw-controls *2) null null);
				@include margin((-($sz-control)) null null null);
				&:after {
					border-top: $triangle-transparent;
					border-bottom: $triangle-transparent;
					border-left: $triangle;
					@include position(absolute, null $bw-controls * 2 null null);
				}
				&:hover {
					&:after {
						border-left: $triangle-hover;
					}
				}
			}

			&:nth-of-type(3) {
				@include position(absolute, null null ($bw-controls *2) 50%);
				@include margin(null null null (-($sz-control)));
				&:after {
					border-left: $triangle-transparent;
					border-right: $triangle-transparent;
					border-top: $triangle;
					@include position(absolute, null null $bw-controls * 2 null);
				}
				&:hover {
					&:after {
						border-top: $triangle-hover;
					}
				}
			}

			&:nth-of-type(4) {
				@include position(absolute, 50% null null ($bw-controls *2));
				@include margin((-($sz-control)) null null null);
				&:after {
					border-top: $triangle-transparent;
					border-bottom: $triangle-transparent;
					border-right: $triangle;
					@include position(absolute, null null null $bw-controls * 2);
				}
				&:hover {
					&:after {
						border-right: $triangle-hover;
					}
				}
			}
		}
	}
	&__range {
		@include position(absolute, null $base-spacing $base-spacing null);
		pointer-events: none;
		&-wrapper {
			max-width: 105px;
			pointer-events: initial;
			&:first-of-type {
				transform-origin: bottom right;
				transform: rotate(270deg) translate(100%, 0);
			}
			&:last-of-type {
				transform: translate(-($sz-control*2), 0);
			}
		}

		input[type=range] {

			// resetting default styles
			-webkit-appearance: none;
			width: 100%;
			background: transparent;

			&:focus {
				// resetting default styles
				outline: none;
			}

			&::-webkit-slider-thumb {
				// resetting default styles
				-webkit-appearance: none;

				// applying new for chrome
				border: 1px solid $c-marker;
				@include size($sz-control*2);
				border-radius: $sz-control;
				cursor: pointer;
				background-color: white;
				position: relative;
				top: -$sz-control;
				@include will-change(border, background-color);
				@extend %anim-base;
				&:hover, &:focus {
					border: 1px solid white;
					background-color: $c-marker;
				}
			}
			&::-moz-range-thumb {
				// applying new for firefox
				border: 1px solid $c-marker;
				@include size($sz-control*2);
				border-radius: $sz-control;
				background-color: white;
				cursor: pointer;
			}
			&::-ms-track {
				// resetting default styles for IE
				width: 100%;
				cursor: pointer;
				background: transparent;
				border-color: transparent;
				color: transparent;
			}

			&::-ms-thumb {
				border: 1px solid $c-marker;
				@include size($sz-control*2);
				border-radius: $sz-control;
				background-color: white;
				cursor: pointer;
			}
			&::-webkit-slider-runnable-track {
				@include size(100% 2px);
				cursor: pointer;
				background: $c-marker;
				border: 1px solid white;

			}
			&:focus {
				&::-webkit-slider-runnable-track {
					background: $c-marker;
				}
			}
			&::-moz-range-track {
				@include size(100% 2px);
				cursor: pointer;
				background: $c-marker;
				border: 1px solid white;

			}
			&::-ms-track {
				@include size(100% 2px);
				cursor: pointer;
				background: transparent;
				border-color: transparent;
				border-width: $sz-control*2 0;
				color: transparent;
			}

			&::-ms-fill-lower {
				background: $c-marker;
				border: 1px solid white;
			}

			&:focus {
				&::-ms-fill-lower {
					background: $c-marker;
				}
			}

			&::-ms-fill-upper {
				background: $c-marker;
				border: 1px solid white;
			}

			&:focus {
				&::-ms-fill-upper {
					background: $c-marker;
				}
			}
		}
	}

	&__reset {
		$circle-size: $sz-control * 2;
		@include position(absolute, 50% null null 50%);
		@include size($sz-controls/2 $circle-size);
		@include margin((-($circle-size/2) null null (-($sz-controls/4))));
		display: flex;
		justify-content: space-around;
		align-items: center;
		&-btn {
			display: inline-block;
			text-align: center;
			@include size($circle-size);
			flex: 0 0 $circle-size;
			max-width: $circle-size;
			cursor: pointer;
			box-sizing: border-box;
			border-radius: 50%;
			cursor: pointer;
			@include will-change(border, background-color);
			@extend %anim-base;
			img {
				@include size(100% auto);
				display: block;
			}

			&.to-myplace {
				background-color: transparent;
				border: 1px solid white;
				&:after {
					@include size($sz-control);
					@include position(absolute, 50% null null 50%);
					content: '';
					display: block;
					@include margin((-($sz-control/2)) null null (-($sz-control/2)));
					background-color: white;
					border-radius: 50%;
					@include will-change(transform, background-color);
					@extend %anim-base;
				}
				&:hover {
					border: 1px solid $c-marker;
					background-color: rgba(255, 255, 255, 0.9);
					&:after {
						transform: rotate3d(1, 0, 0, 180deg);
						background-color: $c-marker;
					}
				}
			}
			&.to-gmap {
				img {
					@include will-change(transform);
					@extend %anim-base;
					transform: rotate3d(1, 0, 0, 180deg);
				}
				&:hover {
					img {
						transform: rotate3d(1, 0, 0, 0deg);
					}
				}
			}

			&.to-map {
				span {
					@include will-change(transform, color, background-color);
					@extend %anim-base;
					transform: rotate(0);
					color: white;
					background-color: transparent;
					font-weight: bold;
					line-height: $circle-size + 3px;
					font-size: $circle-size;
					display: inline-block;
					@include size($circle-size);
					border-radius: $circle-size/2;
				}
				&:hover {
					span {
						transform: rotate(-360deg);
						color: $c-marker;
						background-color: white;
					}
				}
			}
		}
	}
}