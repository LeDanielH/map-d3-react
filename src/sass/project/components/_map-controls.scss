$sz-controls: 150px;
$sz-control: 8px;
$sz-compass: 110px;
$bw-controls: 1px;
$triangle-transparent: $sz-control solid transparent;
$triangle: $sz-control solid white;
$triangle-hover: $sz-control solid $c-marker;
.map {

	&__controls {
		@include position(absolute, null 0 0 null);
		@include size($sz-controls);
		box-sizing: border-box;
	}

	&__compass {
		position: relative;
		@include size($sz-compass);
		border-radius: 50%;
		background-color: rgba(255, 255, 255, 0.2);
	}

	&__myplace {
		$circle-size: $sz-control * 2;
		@include size($circle-size);
		@include position(absolute, 50% null null 50%);
		transform: translate(-50%, -50%);
		background-color: transparent;
		border-radius: 50%;
		cursor: pointer;
		@include will-change(border, background-color);
		@extend %anim-base;
		//transition-duration: $tr-duration/2;
		border: 1px solid white;
		box-sizing: content-box;
		//background-clip: padding-box;

		&:after {
			@include size($sz-control);
			@include position(absolute, 50% null null 50%);
			content: '';
			display: block;
			@include margin((-($sz-control/2)) null null (-($sz-control/2)));
			background-color: white;
			border-radius: 50%;
			@include will-change(transform, background-color);
			@extend %anim-base;
		}
		&:hover {
			border: 1px solid $c-marker;
			background-color: rgba(255, 255, 255, 0.9);
			&:after {
				transform: rotate3d(1, 0, 0, 180deg);
				background-color: $c-marker;
			}
		}
	}

	&__zoom {
		@include size($sz-controls/2);
		@include position(absolute, 50% null null 50%);
		@include margin((-($sz-controls/4)) null null (-($sz-controls/4)));
		border: 1px solid white;
		border-radius: $sz-controls/4;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		align-items: center;
		overflow: hidden;

		&-btn {
			//background-color: $c-marker;
			color: white;
			text-align: center;
			width: 100%;
			cursor: pointer;
			&:first-of-type {

			}

			&:last-of-type {

			}
			span {
				display: inline-block;
				@include will-change(color, transform, background-color, border);
				@extend %anim-base;
				background-color: transparent;
				line-height: $sz-control * 2;
				@include size($sz-control * 2);
				font-size: $sz-control*2;
				border-radius: 50%;
				border: 1px solid transparent;
				box-sizing: content-box;
			}
			&:hover {
				span {
					//transform: rotate3d(1, 0, 0, 180deg);
					color: $c-marker;
					background-color: white;
					border: 1px solid $c-marker
				}
			}
		}
	}

	&__pan {
		@include size($sz-compass);
		overflow: hidden;
		border-radius: $sz-controls/2;
		box-sizing: border-box;
		&-btn {
			@include size($sz-control * 2);
			//background-color: $c-marker;
			border-radius: $sz-control;
			cursor: pointer;

			&:after {
				transform: scale(0.8);
				content: '';
				display: block;
				@include will-change(border, transform);
				@extend %anim-base;
			}

			&:hover {
				&:after {
					transform: scale(1);
				}
			}

			&:nth-of-type(1) {
				@include position(absolute, ($bw-controls *2) null null 50%);
				@include margin(null null null (-($sz-control)));
				&:after {
					border-left: $triangle-transparent;
					border-right: $triangle-transparent;
					border-bottom: $triangle;
					@include position(absolute, $bw-controls * 2 null null null);
				}
				&:hover {
					&:after {
						border-bottom: $triangle-hover;
					}
				}
			}

			&:nth-of-type(2) {
				@include position(absolute, 50% ($bw-controls *2) null null);
				@include margin((-($sz-control)) null null null);
				&:after {
					border-top: $triangle-transparent;
					border-bottom: $triangle-transparent;
					border-left: $triangle;
					@include position(absolute, null $bw-controls * 2 null null);
				}
				&:hover {
					&:after {
						border-left: $triangle-hover;
					}
				}
			}

			&:nth-of-type(3) {
				@include position(absolute, null null ($bw-controls *2) 50%);
				@include margin(null null null (-($sz-control)));
				&:after {
					border-left: $triangle-transparent;
					border-right: $triangle-transparent;
					border-top: $triangle;
					@include position(absolute, null null $bw-controls * 2 null);
				}
				&:hover {
					&:after {
						border-top: $triangle-hover;
					}
				}
			}

			&:nth-of-type(4) {
				@include position(absolute, 50% null null ($bw-controls *2));
				@include margin((-($sz-control)) null null null);
				&:after {
					border-top: $triangle-transparent;
					border-bottom: $triangle-transparent;
					border-right: $triangle;
					@include position(absolute, null null null $bw-controls * 2);
				}
				&:hover {
					&:after {
						border-right: $triangle-hover;
					}
				}
			}
		}
	}
	&__range {
		@include position(absolute, null $base-spacing $base-spacing null);
		&-wrapper {
			&:first-of-type {
				transform-origin: bottom right;
				transform: rotate(270deg) translate(100%, 0);
			}
		}
	}
}